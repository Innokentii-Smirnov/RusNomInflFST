load stack ../../ParadigmFeatures/Alternations/GetAlternations.bin
invert net
define GetPreciseDeclType;
read lexc ../../ParadigmFeatures/NonStandEndings/GetNonStandEndings.lexc
define NonStandEndingsLexicon;
source ../../LetterClasses.foma
source ../../ParadigmFeatures.foma
define Intervening Alternation*;
define Following DeclType (Gender) (Number) (NumberHom) (ParadigmDefects) GrammRazr (Animacy) (Gender);
define Insertion Letter+ Intervening 0:NonStandEnding* Following .o. [NonStandEndingsLexicon / Intervening] Following;
define NonStandEndingsExceptions Insertion .P. ?*;
define Alt Alternation*;
define Nse NonStandEnding*;
regex [..] -> %+Nse1 || Letter Alt [%+Alt12 | %+Alt14 | %+Alt15] Alt _ Nse DeclType %+Masc;
regex [..] -> %+Nse1 || {ко} Irr Alt _ NonStandEnding* DeclType;
regex [..] (->) %+Nse1 || и Irr {ще} Alt _ NonStandEnding* DeclType Feature+ %+Masc .#.;
regex [..] -> %+Nse2 || [а|я] Irr н и Irr н %+Alt6 Alt _ NonStandEnding* DeclType;
define Prev %+Nse1|%+Nse2;
define Next [NonStandEnding - Prev]* DeclType Feature+;
regex	Letter+ [Alt & $[%+Alt6|%+Alt14|%+Alt15]] (%+Nse1) 	0:%+Nse3 Next |
		Letter+ Alt (%+Nse1) %+Nse2 						0:%+Nse3 Next |
		Letter+ [Alt & $%+Alt12] (%+Nse1) 					0:%+Nse3 [Next & $[%+Neut|%+Fem]] |
		Letter+ [С|ь]{ко} Acc Alt (%+Nse1)					0:%+Nse3 [Next & $%+Subst1 & $%+Neut] |
		Letter+ {ико} Alt (%+Nse1) 							0:%+Nse3 [Next & $%+Neut] .P.
		?*;
define Prev %+Nse1|%+Nse2|%+Nse3;
define Next [NonStandEnding - Prev]* DeclType Feature+;
regex	Letter+ [К {ля} | С {ря}] Alt Prev* 0:%+Nse4 Next .P. ?*; 
turn stack
compose net
define NonStandEndingsRules;
define GetNonStandEndings GetPreciseDeclType .o. NonStandEndingsExceptions .o. NonStandEndingsRules;
